// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.12.1
// source: sshsigner/v1alpha1/sshsigner.proto

package sshsigner

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SignUserKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The users public key to sign, in authorized_keys format
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,proto3" json:"public_key,omitempty"`
}

func (x *SignUserKeyRequest) Reset() {
	*x = SignUserKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sshsigner_v1alpha1_sshsigner_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignUserKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignUserKeyRequest) ProtoMessage() {}

func (x *SignUserKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sshsigner_v1alpha1_sshsigner_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignUserKeyRequest.ProtoReflect.Descriptor instead.
func (*SignUserKeyRequest) Descriptor() ([]byte, []int) {
	return file_sshsigner_v1alpha1_sshsigner_proto_rawDescGZIP(), []int{0}
}

func (x *SignUserKeyRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

type SignUserKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// signed certificate to use to connect to the host, in authorized_keys format
	SignedCertificate string `protobuf:"bytes,1,opt,name=signed_certificate,proto3" json:"signed_certificate,omitempty"`
}

func (x *SignUserKeyResponse) Reset() {
	*x = SignUserKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sshsigner_v1alpha1_sshsigner_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignUserKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignUserKeyResponse) ProtoMessage() {}

func (x *SignUserKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sshsigner_v1alpha1_sshsigner_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignUserKeyResponse.ProtoReflect.Descriptor instead.
func (*SignUserKeyResponse) Descriptor() ([]byte, []int) {
	return file_sshsigner_v1alpha1_sshsigner_proto_rawDescGZIP(), []int{1}
}

func (x *SignUserKeyResponse) GetSignedCertificate() string {
	if x != nil {
		return x.SignedCertificate
	}
	return ""
}

type SignHostKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host key to sign, in authorized_keys format
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,proto3" json:"public_key,omitempty"`
	// The hostnames to embed in the certificate principals
	Hostnames []string `protobuf:"bytes,2,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
}

func (x *SignHostKeyRequest) Reset() {
	*x = SignHostKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sshsigner_v1alpha1_sshsigner_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignHostKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignHostKeyRequest) ProtoMessage() {}

func (x *SignHostKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sshsigner_v1alpha1_sshsigner_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignHostKeyRequest.ProtoReflect.Descriptor instead.
func (*SignHostKeyRequest) Descriptor() ([]byte, []int) {
	return file_sshsigner_v1alpha1_sshsigner_proto_rawDescGZIP(), []int{2}
}

func (x *SignHostKeyRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *SignHostKeyRequest) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

type SignHostKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// signed host key, in authorized_keys format
	SignedCertificate string `protobuf:"bytes,1,opt,name=signed_certificate,proto3" json:"signed_certificate,omitempty"`
}

func (x *SignHostKeyResponse) Reset() {
	*x = SignHostKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sshsigner_v1alpha1_sshsigner_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignHostKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignHostKeyResponse) ProtoMessage() {}

func (x *SignHostKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sshsigner_v1alpha1_sshsigner_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignHostKeyResponse.ProtoReflect.Descriptor instead.
func (*SignHostKeyResponse) Descriptor() ([]byte, []int) {
	return file_sshsigner_v1alpha1_sshsigner_proto_rawDescGZIP(), []int{3}
}

func (x *SignHostKeyResponse) GetSignedCertificate() string {
	if x != nil {
		return x.SignedCertificate
	}
	return ""
}

type UserSignersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerificationKeys []*VerificationKey `protobuf:"bytes,1,rep,name=verification_keys,proto3" json:"verification_keys,omitempty"`
}

func (x *UserSignersResponse) Reset() {
	*x = UserSignersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sshsigner_v1alpha1_sshsigner_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSignersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSignersResponse) ProtoMessage() {}

func (x *UserSignersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sshsigner_v1alpha1_sshsigner_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSignersResponse.ProtoReflect.Descriptor instead.
func (*UserSignersResponse) Descriptor() ([]byte, []int) {
	return file_sshsigner_v1alpha1_sshsigner_proto_rawDescGZIP(), []int{4}
}

func (x *UserSignersResponse) GetVerificationKeys() []*VerificationKey {
	if x != nil {
		return x.VerificationKeys
	}
	return nil
}

type HostSignersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerificationKeys []*VerificationKey `protobuf:"bytes,1,rep,name=verification_keys,proto3" json:"verification_keys,omitempty"`
}

func (x *HostSignersResponse) Reset() {
	*x = HostSignersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sshsigner_v1alpha1_sshsigner_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostSignersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostSignersResponse) ProtoMessage() {}

func (x *HostSignersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sshsigner_v1alpha1_sshsigner_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostSignersResponse.ProtoReflect.Descriptor instead.
func (*HostSignersResponse) Descriptor() ([]byte, []int) {
	return file_sshsigner_v1alpha1_sshsigner_proto_rawDescGZIP(), []int{5}
}

func (x *HostSignersResponse) GetVerificationKeys() []*VerificationKey {
	if x != nil {
		return x.VerificationKeys
	}
	return nil
}

type VerificationKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SSH authorized_keys format
	Key    []byte               `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Expiry *timestamp.Timestamp `protobuf:"bytes,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *VerificationKey) Reset() {
	*x = VerificationKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sshsigner_v1alpha1_sshsigner_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerificationKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationKey) ProtoMessage() {}

func (x *VerificationKey) ProtoReflect() protoreflect.Message {
	mi := &file_sshsigner_v1alpha1_sshsigner_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationKey.ProtoReflect.Descriptor instead.
func (*VerificationKey) Descriptor() ([]byte, []int) {
	return file_sshsigner_v1alpha1_sshsigner_proto_rawDescGZIP(), []int{6}
}

func (x *VerificationKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *VerificationKey) GetExpiry() *timestamp.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

var File_sshsigner_v1alpha1_sshsigner_proto protoreflect.FileDescriptor

var file_sshsigner_v1alpha1_sshsigner_proto_rawDesc = []byte{
	0x0a, 0x22, 0x73, 0x73, 0x68, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x73, 0x68, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x73, 0x73, 0x68, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x45, 0x0a, 0x13, 0x53, 0x69,
	0x67, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x22, 0x52, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x48, 0x6f, 0x73,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x68, 0x0a, 0x13,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x73, 0x68, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x52, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x68, 0x0a, 0x13, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a,
	0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x73, 0x68, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x11, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x22, 0x57, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x32, 0x8c, 0x04, 0x0a, 0x06, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x2e, 0x73, 0x73, 0x68, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73,
	0x73, 0x68, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f,
	0x73, 0x73, 0x68, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6b, 0x65, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x86, 0x01,
	0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x2e,
	0x73, 0x73, 0x68, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x73, 0x68, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x48,
	0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x73, 0x73, 0x68, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x68, 0x6f, 0x73, 0x74,
	0x6b, 0x65, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x27, 0x2e,
	0x73, 0x73, 0x68, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f,
	0x2f, 0x73, 0x73, 0x68, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x12,
	0x77, 0x0a, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x27, 0x2e, 0x73, 0x73, 0x68, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x73, 0x73, 0x68, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x68, 0x6f, 0x73,
	0x74, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x72, 0x64, 0x6f, 0x74, 0x2f, 0x73, 0x73,
	0x68, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x73,
	0x68, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x3b, 0x73, 0x73, 0x68, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_sshsigner_v1alpha1_sshsigner_proto_rawDescOnce sync.Once
	file_sshsigner_v1alpha1_sshsigner_proto_rawDescData = file_sshsigner_v1alpha1_sshsigner_proto_rawDesc
)

func file_sshsigner_v1alpha1_sshsigner_proto_rawDescGZIP() []byte {
	file_sshsigner_v1alpha1_sshsigner_proto_rawDescOnce.Do(func() {
		file_sshsigner_v1alpha1_sshsigner_proto_rawDescData = protoimpl.X.CompressGZIP(file_sshsigner_v1alpha1_sshsigner_proto_rawDescData)
	})
	return file_sshsigner_v1alpha1_sshsigner_proto_rawDescData
}

var file_sshsigner_v1alpha1_sshsigner_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_sshsigner_v1alpha1_sshsigner_proto_goTypes = []interface{}{
	(*SignUserKeyRequest)(nil),  // 0: sshsigner.v1alpha1.SignUserKeyRequest
	(*SignUserKeyResponse)(nil), // 1: sshsigner.v1alpha1.SignUserKeyResponse
	(*SignHostKeyRequest)(nil),  // 2: sshsigner.v1alpha1.SignHostKeyRequest
	(*SignHostKeyResponse)(nil), // 3: sshsigner.v1alpha1.SignHostKeyResponse
	(*UserSignersResponse)(nil), // 4: sshsigner.v1alpha1.UserSignersResponse
	(*HostSignersResponse)(nil), // 5: sshsigner.v1alpha1.HostSignersResponse
	(*VerificationKey)(nil),     // 6: sshsigner.v1alpha1.VerificationKey
	(*timestamp.Timestamp)(nil), // 7: google.protobuf.Timestamp
	(*empty.Empty)(nil),         // 8: google.protobuf.Empty
}
var file_sshsigner_v1alpha1_sshsigner_proto_depIdxs = []int32{
	6, // 0: sshsigner.v1alpha1.UserSignersResponse.verification_keys:type_name -> sshsigner.v1alpha1.VerificationKey
	6, // 1: sshsigner.v1alpha1.HostSignersResponse.verification_keys:type_name -> sshsigner.v1alpha1.VerificationKey
	7, // 2: sshsigner.v1alpha1.VerificationKey.expiry:type_name -> google.protobuf.Timestamp
	0, // 3: sshsigner.v1alpha1.Signer.SignUserKey:input_type -> sshsigner.v1alpha1.SignUserKeyRequest
	2, // 4: sshsigner.v1alpha1.Signer.SignHostKey:input_type -> sshsigner.v1alpha1.SignHostKeyRequest
	8, // 5: sshsigner.v1alpha1.Signer.UserSigners:input_type -> google.protobuf.Empty
	8, // 6: sshsigner.v1alpha1.Signer.HostSigners:input_type -> google.protobuf.Empty
	1, // 7: sshsigner.v1alpha1.Signer.SignUserKey:output_type -> sshsigner.v1alpha1.SignUserKeyResponse
	3, // 8: sshsigner.v1alpha1.Signer.SignHostKey:output_type -> sshsigner.v1alpha1.SignHostKeyResponse
	4, // 9: sshsigner.v1alpha1.Signer.UserSigners:output_type -> sshsigner.v1alpha1.UserSignersResponse
	5, // 10: sshsigner.v1alpha1.Signer.HostSigners:output_type -> sshsigner.v1alpha1.HostSignersResponse
	7, // [7:11] is the sub-list for method output_type
	3, // [3:7] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_sshsigner_v1alpha1_sshsigner_proto_init() }
func file_sshsigner_v1alpha1_sshsigner_proto_init() {
	if File_sshsigner_v1alpha1_sshsigner_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sshsigner_v1alpha1_sshsigner_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignUserKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sshsigner_v1alpha1_sshsigner_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignUserKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sshsigner_v1alpha1_sshsigner_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignHostKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sshsigner_v1alpha1_sshsigner_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignHostKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sshsigner_v1alpha1_sshsigner_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSignersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sshsigner_v1alpha1_sshsigner_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostSignersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sshsigner_v1alpha1_sshsigner_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerificationKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sshsigner_v1alpha1_sshsigner_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sshsigner_v1alpha1_sshsigner_proto_goTypes,
		DependencyIndexes: file_sshsigner_v1alpha1_sshsigner_proto_depIdxs,
		MessageInfos:      file_sshsigner_v1alpha1_sshsigner_proto_msgTypes,
	}.Build()
	File_sshsigner_v1alpha1_sshsigner_proto = out.File
	file_sshsigner_v1alpha1_sshsigner_proto_rawDesc = nil
	file_sshsigner_v1alpha1_sshsigner_proto_goTypes = nil
	file_sshsigner_v1alpha1_sshsigner_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SignerClient is the client API for Signer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SignerClient interface {
	// Sign a users key for access
	SignUserKey(ctx context.Context, in *SignUserKeyRequest, opts ...grpc.CallOption) (*SignUserKeyResponse, error)
	// Sign a host key
	SignHostKey(ctx context.Context, in *SignHostKeyRequest, opts ...grpc.CallOption) (*SignHostKeyResponse, error)
	// Get a list of currently valid signers for user keys
	UserSigners(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserSignersResponse, error)
	// Get a list of currently valid signers for host keys
	HostSigners(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*HostSignersResponse, error)
}

type signerClient struct {
	cc grpc.ClientConnInterface
}

func NewSignerClient(cc grpc.ClientConnInterface) SignerClient {
	return &signerClient{cc}
}

func (c *signerClient) SignUserKey(ctx context.Context, in *SignUserKeyRequest, opts ...grpc.CallOption) (*SignUserKeyResponse, error) {
	out := new(SignUserKeyResponse)
	err := c.cc.Invoke(ctx, "/sshsigner.v1alpha1.Signer/SignUserKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signerClient) SignHostKey(ctx context.Context, in *SignHostKeyRequest, opts ...grpc.CallOption) (*SignHostKeyResponse, error) {
	out := new(SignHostKeyResponse)
	err := c.cc.Invoke(ctx, "/sshsigner.v1alpha1.Signer/SignHostKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signerClient) UserSigners(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserSignersResponse, error) {
	out := new(UserSignersResponse)
	err := c.cc.Invoke(ctx, "/sshsigner.v1alpha1.Signer/UserSigners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signerClient) HostSigners(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*HostSignersResponse, error) {
	out := new(HostSignersResponse)
	err := c.cc.Invoke(ctx, "/sshsigner.v1alpha1.Signer/HostSigners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignerServer is the server API for Signer service.
type SignerServer interface {
	// Sign a users key for access
	SignUserKey(context.Context, *SignUserKeyRequest) (*SignUserKeyResponse, error)
	// Sign a host key
	SignHostKey(context.Context, *SignHostKeyRequest) (*SignHostKeyResponse, error)
	// Get a list of currently valid signers for user keys
	UserSigners(context.Context, *empty.Empty) (*UserSignersResponse, error)
	// Get a list of currently valid signers for host keys
	HostSigners(context.Context, *empty.Empty) (*HostSignersResponse, error)
}

// UnimplementedSignerServer can be embedded to have forward compatible implementations.
type UnimplementedSignerServer struct {
}

func (*UnimplementedSignerServer) SignUserKey(context.Context, *SignUserKeyRequest) (*SignUserKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUserKey not implemented")
}
func (*UnimplementedSignerServer) SignHostKey(context.Context, *SignHostKeyRequest) (*SignHostKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignHostKey not implemented")
}
func (*UnimplementedSignerServer) UserSigners(context.Context, *empty.Empty) (*UserSignersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSigners not implemented")
}
func (*UnimplementedSignerServer) HostSigners(context.Context, *empty.Empty) (*HostSignersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostSigners not implemented")
}

func RegisterSignerServer(s *grpc.Server, srv SignerServer) {
	s.RegisterService(&_Signer_serviceDesc, srv)
}

func _Signer_SignUserKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUserKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServer).SignUserKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sshsigner.v1alpha1.Signer/SignUserKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServer).SignUserKey(ctx, req.(*SignUserKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signer_SignHostKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignHostKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServer).SignHostKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sshsigner.v1alpha1.Signer/SignHostKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServer).SignHostKey(ctx, req.(*SignHostKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signer_UserSigners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServer).UserSigners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sshsigner.v1alpha1.Signer/UserSigners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServer).UserSigners(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signer_HostSigners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServer).HostSigners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sshsigner.v1alpha1.Signer/HostSigners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServer).HostSigners(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Signer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sshsigner.v1alpha1.Signer",
	HandlerType: (*SignerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUserKey",
			Handler:    _Signer_SignUserKey_Handler,
		},
		{
			MethodName: "SignHostKey",
			Handler:    _Signer_SignHostKey_Handler,
		},
		{
			MethodName: "UserSigners",
			Handler:    _Signer_UserSigners_Handler,
		},
		{
			MethodName: "HostSigners",
			Handler:    _Signer_HostSigners_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sshsigner/v1alpha1/sshsigner.proto",
}
